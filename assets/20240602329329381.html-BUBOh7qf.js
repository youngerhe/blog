import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as i}from"./app-BD7WayJ1.js";const e={},l=i(`<h1 id="《mbit》golang-实现-nacos-服务注册与发现" tabindex="-1"><a class="header-anchor" href="#《mbit》golang-实现-nacos-服务注册与发现"><span>《Mbit》Golang 实现 nacos 服务注册与发现</span></a></h1><h2 id="一、封装" tabindex="-1"><a class="header-anchor" href="#一、封装"><span>一、封装</span></a></h2><ul><li><strong>这里把 nacos 配置中心的初始化也放到了这个工具类里面了</strong></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package nacos</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import (</span></span>
<span class="line"><span>  &quot;bytes&quot;</span></span>
<span class="line"><span>  &quot;fmt&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/clients&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/clients/config_client&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/clients/naming_client&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/common/constant&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/model&quot;</span></span>
<span class="line"><span>  &quot;github.com/nacos-group/nacos-sdk-go/v2/vo&quot;</span></span>
<span class="line"><span>  &quot;github.com/spf13/viper&quot;</span></span>
<span class="line"><span>  &quot;os&quot;</span></span>
<span class="line"><span>  &quot;strconv&quot;</span></span>
<span class="line"><span>  &quot;strings&quot;</span></span>
<span class="line"><span>  &quot;uc/pkg/util&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const (</span></span>
<span class="line"><span>  ENV_NACOS_ENDPOINTS = &quot;ENV_NACOS_ENDPOINTS&quot;</span></span>
<span class="line"><span>  ENV_APP             = &quot;ENV_APP&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type Client struct {</span></span>
<span class="line"><span>  nameClient   naming_client.INamingClient</span></span>
<span class="line"><span>  configClient config_client.IConfigClient</span></span>
<span class="line"><span>  *ClientOptions</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var NacosClient *Client</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type ClientOptions struct {</span></span>
<span class="line"><span>  ServerAddr      string</span></span>
<span class="line"><span>  Namespace       string</span></span>
<span class="line"><span>  DataId          string</span></span>
<span class="line"><span>  ConfigGroupName string</span></span>
<span class="line"><span>  NameGroupName   string</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func Init() {</span></span>
<span class="line"><span>  // 获取nacos节点</span></span>
<span class="line"><span>  endpoints, exist := os.LookupEnv(ENV_NACOS_ENDPOINTS)</span></span>
<span class="line"><span>  if !exist {</span></span>
<span class="line"><span>    panic(&quot;ENV_NACOS_ENDPOINTS not exist&quot;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 获取当前环境</span></span>
<span class="line"><span>  envApp, exist := os.LookupEnv(ENV_APP)</span></span>
<span class="line"><span>  if !exist {</span></span>
<span class="line"><span>    panic(&quot;ENV_APP not exist&quot;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 初始化Nacos配置</span></span>
<span class="line"><span>  client, err := NewNacosClient(&amp;ClientOptions{</span></span>
<span class="line"><span>    ServerAddr:      endpoints,</span></span>
<span class="line"><span>    Namespace:       envApp,</span></span>
<span class="line"><span>    DataId:          &quot;user_config.yaml&quot;,</span></span>
<span class="line"><span>    ConfigGroupName: &quot;USER_GROUP&quot;,</span></span>
<span class="line"><span>    NameGroupName:   &quot;DEFAULT_GROUP&quot;,</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    panic(fmt.Sprintf(&quot;Nacos Init err:%v&quot;, err))</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  NacosClient = client</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func RegisterInstance() {</span></span>
<span class="line"><span>  ip := util.LocalMulIPv4()</span></span>
<span class="line"><span>  err := NacosClient.RegisterInstance(Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>
<span class="line"><span>  fmt.Println(&quot;RegisterInstance:&quot;, Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    panic(fmt.Sprintf(&quot;NacosClient.RegisterInstance err:%v&quot;, err))</span></span>
<span class="line"><span>    return</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func DeregisterInstance() {</span></span>
<span class="line"><span>  ip := util.LocalMulIPv4()</span></span>
<span class="line"><span>  err := NacosClient.RegisterInstance(Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    panic(fmt.Sprintf(&quot;NacosClient.DeregisterInstance err:%v&quot;, err))</span></span>
<span class="line"><span>    return</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func NewNacosClient(co *ClientOptions) (*Client, error) {</span></span>
<span class="line"><span>  var serverConfigs []constant.ServerConfig</span></span>
<span class="line"><span>  values := strings.Split(co.ServerAddr, &quot;,&quot;)</span></span>
<span class="line"><span>  for _, v := range values {</span></span>
<span class="line"><span>    vs := strings.Split(v, &quot;:&quot;)</span></span>
<span class="line"><span>    if len(vs) != 2 {</span></span>
<span class="line"><span>      continue</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    port, _ := strconv.ParseUint(vs[1], 10, 64)</span></span>
<span class="line"><span>    serverConfigs = append(serverConfigs, *constant.NewServerConfig(vs[0], port))</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  clientConfig := *constant.NewClientConfig(</span></span>
<span class="line"><span>    constant.WithNamespaceId(co.Namespace),</span></span>
<span class="line"><span>    constant.WithTimeoutMs(5000),</span></span>
<span class="line"><span>    constant.WithNotLoadCacheAtStart(true),</span></span>
<span class="line"><span>    constant.WithLogDir(&quot;/tmp/nacos/log&quot;),</span></span>
<span class="line"><span>    constant.WithCacheDir(&quot;/tmp/nacos/cache&quot;),</span></span>
<span class="line"><span>    constant.WithLogLevel(&quot;warn&quot;),</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>  param := vo.NacosClientParam{</span></span>
<span class="line"><span>    ClientConfig:  &amp;clientConfig,</span></span>
<span class="line"><span>    ServerConfigs: serverConfigs,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  nameClient, err := clients.NewNamingClient(param)</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    return nil, err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  configClient, err := clients.NewConfigClient(</span></span>
<span class="line"><span>    vo.NacosClientParam{</span></span>
<span class="line"><span>      ClientConfig:  &amp;clientConfig,</span></span>
<span class="line"><span>      ServerConfigs: serverConfigs,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    return nil, err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return &amp;Client{nameClient, configClient, co}, nil</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (nc *Client) GetConfig() (string, error) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 获取配置</span></span>
<span class="line"><span>  content, err := nc.configClient.GetConfig(vo.ConfigParam{</span></span>
<span class="line"><span>    DataId: nc.DataId,</span></span>
<span class="line"><span>    Group:  nc.ConfigGroupName,</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    return &quot;&quot;, err</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  go func() {</span></span>
<span class="line"><span>    err = nc.configClient.ListenConfig(vo.ConfigParam{</span></span>
<span class="line"><span>      DataId: nc.DataId,</span></span>
<span class="line"><span>      Group:  nc.ConfigGroupName,</span></span>
<span class="line"><span>      OnChange: func(namespace, group, dataId, data string) {</span></span>
<span class="line"><span>        dataByte := []byte(data)</span></span>
<span class="line"><span>        if err = viper.MergeConfig(bytes.NewBuffer(dataByte)); err != nil {</span></span>
<span class="line"><span>          fmt.Printf(&quot;viper MergeConfig err: %v&quot;, err)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }()</span></span>
<span class="line"><span>  return content, nil</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (nc *Client) RegisterInstance(serviceName, ip string, port uint64) error {</span></span>
<span class="line"><span>  param := vo.RegisterInstanceParam{</span></span>
<span class="line"><span>    Ip:          ip,</span></span>
<span class="line"><span>    Port:        port,</span></span>
<span class="line"><span>    ServiceName: serviceName,</span></span>
<span class="line"><span>    GroupName:   nc.NameGroupName,</span></span>
<span class="line"><span>    Weight:      10,</span></span>
<span class="line"><span>    Enable:      true,</span></span>
<span class="line"><span>    Healthy:     true,</span></span>
<span class="line"><span>    Ephemeral:   true,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  success, err := nc.nameClient.RegisterInstance(param)</span></span>
<span class="line"><span>  if !success || err != nil {</span></span>
<span class="line"><span>    return err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return nil</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (nc *Client) DeregisterInstance(serviceName, ip string, port uint64) error {</span></span>
<span class="line"><span>  param := vo.DeregisterInstanceParam{</span></span>
<span class="line"><span>    Ip:          ip,</span></span>
<span class="line"><span>    Port:        port,</span></span>
<span class="line"><span>    ServiceName: serviceName,</span></span>
<span class="line"><span>    GroupName:   nc.NameGroupName,</span></span>
<span class="line"><span>    Ephemeral:   true,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  success, err := nc.nameClient.DeregisterInstance(param)</span></span>
<span class="line"><span>    if success || err != nil {</span></span>
<span class="line"><span>    return err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return nil</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (nc *Client) GetAllInstances() (serviceList model.ServiceList, err error) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  param := vo.GetAllServiceInfoParam{</span></span>
<span class="line"><span>    NameSpace: nc.Namespace,</span></span>
<span class="line"><span>    GroupName: nc.NameGroupName,</span></span>
<span class="line"><span>    PageNo:    10,</span></span>
<span class="line"><span>    PageSize:  10,</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  serviceList = model.ServiceList{}</span></span>
<span class="line"><span>  serviceList, err = nc.nameClient.GetAllServicesInfo(param)</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    return serviceList, err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return serviceList, nil</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (nc *Client) WatchService(serviceName string, callback func(services []model.Instance)) error {</span></span>
<span class="line"><span>  err := nc.nameClient.Subscribe(&amp;vo.SubscribeParam{</span></span>
<span class="line"><span>    ServiceName: serviceName,</span></span>
<span class="line"><span>    GroupName:   nc.NameGroupName,</span></span>
<span class="line"><span>    SubscribeCallback: func(services []model.Instance, err error) {</span></span>
<span class="line"><span>      callback(services)</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  if err != nil {</span></span>
<span class="line"><span>    return err</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return nil</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、服务注册" tabindex="-1"><a class="header-anchor" href="#二、服务注册"><span>二、服务注册</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//main.go</span></span>
<span class="line"><span>nacos.Init()</span></span>
<span class="line"><span>nacos.InitConfig()</span></span>
<span class="line"><span>// ...xx init</span></span>
<span class="line"><span>// 路由初始化</span></span>
<span class="line"><span>r := router.Init()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 服务启动</span></span>
<span class="line"><span>srv := &amp;http.Server{</span></span>
<span class="line"><span>  Addr:    &quot;:&quot; + viper.GetString(&quot;app.port&quot;),</span></span>
<span class="line"><span>  Handler: r,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>go func() {</span></span>
<span class="line"><span>  // 服务注册</span></span>
<span class="line"><span>  nacos.RegisterInstance()</span></span>
<span class="line"><span>  if err := srv.ListenAndServe(); err != nil &amp;&amp; !errors.Is(err, http.ErrServerClosed) {</span></span>
<span class="line"><span>    panic(err)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 等待中断信号</span></span>
<span class="line"><span>quit := make(chan os.Signal, 1)</span></span>
<span class="line"><span>signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 阻塞</span></span>
<span class="line"><span>&lt;-quit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 注销服务</span></span>
<span class="line"><span>nacos.DeregisterInstance()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 关闭http</span></span>
<span class="line"><span>ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)</span></span>
<span class="line"><span>defer cancel()</span></span>
<span class="line"><span>if err := srv.Shutdown(ctx); err != nil {</span></span>
<span class="line"><span>  logger.Logger.Error(&quot;server shutdown err:&quot;, err)</span></span>
<span class="line"><span>  fmt.Printf(&quot;server shutdown: %v &quot;, err)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、服务发现" tabindex="-1"><a class="header-anchor" href="#三、服务发现"><span>三、服务发现</span></a></h2><ul><li><strong>这种是获取单个服务，每次需要调用其他服务的时候单个获取。</strong></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>instance, err := config.NacosNamingClient.SelectOneHealthyInstance(vo.SelectOneHealthInstanceParam{</span></span>
<span class="line"><span>  ServiceName: &quot;xxx&quot;,</span></span>
<span class="line"><span>  GroupName:   &quot;DEFAULT_GROUP&quot;,  </span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>// ...http/grpc访问</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>另外一种是通过订阅的方式维护全部服务，下面是一个伪代码</strong></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 定义全局服务列表map</span></span>
<span class="line"><span>var serviceMap map[string]string</span></span>
<span class="line"><span>// 获取所有服务地址</span></span>
<span class="line"><span>serviceList, err := nacos.NacosClient.GetAllInstances()</span></span>
<span class="line"><span>// 循环服务地址，拼接赋值给服务列表map</span></span>
<span class="line"><span>for i := range list.Doms {</span></span>
<span class="line"><span>  serviceMap := xxx</span></span>
<span class="line"><span>  // 监听各个服务，拼接赋值给服务列表map</span></span>
<span class="line"><span>  nacos.NacosClient.WatchService(&quot;xx&quot;, func(services []model.Instance) {</span></span>
<span class="line"><span>    serviceMap := xxx</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),p=[l];function c(r,d){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","20240602329329381.html.vue"]]),m=JSON.parse('{"path":"/golang/mbit/20240602329329381.html","title":"《Mbit》Golang实现nacos服务注册与发现","lang":"zh-CN","frontmatter":{"title":"《Mbit》Golang实现nacos服务注册与发现","category":["golang"],"date":"2024-06-02T00:00:00.000Z","tag":["nacos","golang","mbit"],"description":"《Mbit》Golang 实现 nacos 服务注册与发现 一、封装 这里把 nacos 配置中心的初始化也放到了这个工具类里面了 二、服务注册 三、服务发现 这种是获取单个服务，每次需要调用其他服务的时候单个获取。 另外一种是通过订阅的方式维护全部服务，下面是一个伪代码","head":[["meta",{"property":"og:url","content":"https://github.com/youngerhe/blog/golang/mbit/20240602329329381.html"}],["meta",{"property":"og:site_name","content":"木锤"}],["meta",{"property":"og:title","content":"《Mbit》Golang实现nacos服务注册与发现"}],["meta",{"property":"og:description","content":"《Mbit》Golang 实现 nacos 服务注册与发现 一、封装 这里把 nacos 配置中心的初始化也放到了这个工具类里面了 二、服务注册 三、服务发现 这种是获取单个服务，每次需要调用其他服务的时候单个获取。 另外一种是通过订阅的方式维护全部服务，下面是一个伪代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T03:43:57.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"nacos"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"mbit"}],["meta",{"property":"article:published_time","content":"2024-06-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T03:43:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《Mbit》Golang实现nacos服务注册与发现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T03:43:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"一、封装","slug":"一、封装","link":"#一、封装","children":[]},{"level":2,"title":"二、服务注册","slug":"二、服务注册","link":"#二、服务注册","children":[]},{"level":2,"title":"三、服务发现","slug":"三、服务发现","link":"#三、服务发现","children":[]}],"git":{"createdTime":1724471037000,"updatedTime":1724471037000,"contributors":[{"name":"perkins","email":"mbitchina@163.com","commits":1}]},"readingTime":{"minutes":2.59,"words":776},"filePathRelative":"golang/mbit/20240602329329381.md","localizedDate":"2024年6月2日","excerpt":"\\n<h2>一、封装</h2>\\n<ul>\\n<li><strong>这里把 nacos 配置中心的初始化也放到了这个工具类里面了</strong></li>\\n</ul>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>package nacos</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>import (</span></span>\\n<span class=\\"line\\"><span>  \\"bytes\\"</span></span>\\n<span class=\\"line\\"><span>  \\"fmt\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/clients\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/clients/config_client\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/clients/naming_client\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/common/constant\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/model\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/nacos-group/nacos-sdk-go/v2/vo\\"</span></span>\\n<span class=\\"line\\"><span>  \\"github.com/spf13/viper\\"</span></span>\\n<span class=\\"line\\"><span>  \\"os\\"</span></span>\\n<span class=\\"line\\"><span>  \\"strconv\\"</span></span>\\n<span class=\\"line\\"><span>  \\"strings\\"</span></span>\\n<span class=\\"line\\"><span>  \\"uc/pkg/util\\"</span></span>\\n<span class=\\"line\\"><span>)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>const (</span></span>\\n<span class=\\"line\\"><span>  ENV_NACOS_ENDPOINTS = \\"ENV_NACOS_ENDPOINTS\\"</span></span>\\n<span class=\\"line\\"><span>  ENV_APP &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \\"ENV_APP\\"</span></span>\\n<span class=\\"line\\"><span>)</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>type Client struct {</span></span>\\n<span class=\\"line\\"><span>  nameClient &nbsp; naming_client.INamingClient</span></span>\\n<span class=\\"line\\"><span>  configClient config_client.IConfigClient</span></span>\\n<span class=\\"line\\"><span>  *ClientOptions</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>var NacosClient *Client</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>type ClientOptions struct {</span></span>\\n<span class=\\"line\\"><span>  ServerAddr &nbsp; &nbsp; &nbsp;string</span></span>\\n<span class=\\"line\\"><span>  Namespace &nbsp; &nbsp; &nbsp; string</span></span>\\n<span class=\\"line\\"><span>  DataId &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;string</span></span>\\n<span class=\\"line\\"><span>  ConfigGroupName string</span></span>\\n<span class=\\"line\\"><span>  NameGroupName &nbsp; string</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func Init() {</span></span>\\n<span class=\\"line\\"><span>  // 获取nacos节点</span></span>\\n<span class=\\"line\\"><span>  endpoints, exist := os.LookupEnv(ENV_NACOS_ENDPOINTS)</span></span>\\n<span class=\\"line\\"><span>  if !exist {</span></span>\\n<span class=\\"line\\"><span>    panic(\\"ENV_NACOS_ENDPOINTS not exist\\")</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  // 获取当前环境</span></span>\\n<span class=\\"line\\"><span>  envApp, exist := os.LookupEnv(ENV_APP)</span></span>\\n<span class=\\"line\\"><span>  if !exist {</span></span>\\n<span class=\\"line\\"><span>    panic(\\"ENV_APP not exist\\")</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  // 初始化Nacos配置</span></span>\\n<span class=\\"line\\"><span>  client, err := NewNacosClient(&amp;ClientOptions{</span></span>\\n<span class=\\"line\\"><span>    ServerAddr: &nbsp; &nbsp; &nbsp;endpoints,</span></span>\\n<span class=\\"line\\"><span>    Namespace: &nbsp; &nbsp; &nbsp; envApp,</span></span>\\n<span class=\\"line\\"><span>    DataId: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\"user_config.yaml\\",</span></span>\\n<span class=\\"line\\"><span>    ConfigGroupName: \\"USER_GROUP\\",</span></span>\\n<span class=\\"line\\"><span>    NameGroupName: &nbsp; \\"DEFAULT_GROUP\\",</span></span>\\n<span class=\\"line\\"><span>  })</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    panic(fmt.Sprintf(\\"Nacos Init err:%v\\", err))</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  NacosClient = client</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func RegisterInstance() {</span></span>\\n<span class=\\"line\\"><span>  ip := util.LocalMulIPv4()</span></span>\\n<span class=\\"line\\"><span>  err := NacosClient.RegisterInstance(Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>\\n<span class=\\"line\\"><span>  fmt.Println(\\"RegisterInstance:\\", Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    panic(fmt.Sprintf(\\"NacosClient.RegisterInstance err:%v\\", err))</span></span>\\n<span class=\\"line\\"><span>    return</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func DeregisterInstance() {</span></span>\\n<span class=\\"line\\"><span>  ip := util.LocalMulIPv4()</span></span>\\n<span class=\\"line\\"><span>  err := NacosClient.RegisterInstance(Config.App.Name, ip[0], uint64(Config.App.Port))</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    panic(fmt.Sprintf(\\"NacosClient.DeregisterInstance err:%v\\", err))</span></span>\\n<span class=\\"line\\"><span>    return</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func NewNacosClient(co *ClientOptions) (*Client, error) {</span></span>\\n<span class=\\"line\\"><span>  var serverConfigs []constant.ServerConfig</span></span>\\n<span class=\\"line\\"><span>  values := strings.Split(co.ServerAddr, \\",\\")</span></span>\\n<span class=\\"line\\"><span>  for _, v := range values {</span></span>\\n<span class=\\"line\\"><span>    vs := strings.Split(v, \\":\\")</span></span>\\n<span class=\\"line\\"><span>    if len(vs) != 2 {</span></span>\\n<span class=\\"line\\"><span>      continue</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>    port, _ := strconv.ParseUint(vs[1], 10, 64)</span></span>\\n<span class=\\"line\\"><span>    serverConfigs = append(serverConfigs, *constant.NewServerConfig(vs[0], port))</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  clientConfig := *constant.NewClientConfig(</span></span>\\n<span class=\\"line\\"><span>    constant.WithNamespaceId(co.Namespace),</span></span>\\n<span class=\\"line\\"><span>    constant.WithTimeoutMs(5000),</span></span>\\n<span class=\\"line\\"><span>    constant.WithNotLoadCacheAtStart(true),</span></span>\\n<span class=\\"line\\"><span>    constant.WithLogDir(\\"/tmp/nacos/log\\"),</span></span>\\n<span class=\\"line\\"><span>    constant.WithCacheDir(\\"/tmp/nacos/cache\\"),</span></span>\\n<span class=\\"line\\"><span>    constant.WithLogLevel(\\"warn\\"),</span></span>\\n<span class=\\"line\\"><span>  )</span></span>\\n<span class=\\"line\\"><span>  param := vo.NacosClientParam{</span></span>\\n<span class=\\"line\\"><span>    ClientConfig: &nbsp;&amp;clientConfig,</span></span>\\n<span class=\\"line\\"><span>    ServerConfigs: serverConfigs,</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  nameClient, err := clients.NewNamingClient(param)</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    return nil, err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  configClient, err := clients.NewConfigClient(</span></span>\\n<span class=\\"line\\"><span>    vo.NacosClientParam{</span></span>\\n<span class=\\"line\\"><span>      ClientConfig: &nbsp;&amp;clientConfig,</span></span>\\n<span class=\\"line\\"><span>      ServerConfigs: serverConfigs,</span></span>\\n<span class=\\"line\\"><span>    },</span></span>\\n<span class=\\"line\\"><span>  )</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    return nil, err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  return &amp;Client{nameClient, configClient, co}, nil</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func (nc *Client) GetConfig() (string, error) {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  // 获取配置</span></span>\\n<span class=\\"line\\"><span>  content, err := nc.configClient.GetConfig(vo.ConfigParam{</span></span>\\n<span class=\\"line\\"><span>    DataId: nc.DataId,</span></span>\\n<span class=\\"line\\"><span>    Group: &nbsp;nc.ConfigGroupName,</span></span>\\n<span class=\\"line\\"><span>  })</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    return \\"\\", err</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span>  go func() {</span></span>\\n<span class=\\"line\\"><span>    err = nc.configClient.ListenConfig(vo.ConfigParam{</span></span>\\n<span class=\\"line\\"><span>      DataId: nc.DataId,</span></span>\\n<span class=\\"line\\"><span>      Group: &nbsp;nc.ConfigGroupName,</span></span>\\n<span class=\\"line\\"><span>      OnChange: func(namespace, group, dataId, data string) {</span></span>\\n<span class=\\"line\\"><span>        dataByte := []byte(data)</span></span>\\n<span class=\\"line\\"><span>        if err = viper.MergeConfig(bytes.NewBuffer(dataByte)); err != nil {</span></span>\\n<span class=\\"line\\"><span>          fmt.Printf(\\"viper MergeConfig err: %v\\", err)</span></span>\\n<span class=\\"line\\"><span>        }</span></span>\\n<span class=\\"line\\"><span>      },</span></span>\\n<span class=\\"line\\"><span>    })</span></span>\\n<span class=\\"line\\"><span>  }()</span></span>\\n<span class=\\"line\\"><span>  return content, nil</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func (nc *Client) RegisterInstance(serviceName, ip string, port uint64) error {</span></span>\\n<span class=\\"line\\"><span>  param := vo.RegisterInstanceParam{</span></span>\\n<span class=\\"line\\"><span>    Ip: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ip,</span></span>\\n<span class=\\"line\\"><span>    Port: &nbsp; &nbsp; &nbsp; &nbsp;port,</span></span>\\n<span class=\\"line\\"><span>    ServiceName: serviceName,</span></span>\\n<span class=\\"line\\"><span>    GroupName: &nbsp; nc.NameGroupName,</span></span>\\n<span class=\\"line\\"><span>    Weight: &nbsp; &nbsp; &nbsp;10,</span></span>\\n<span class=\\"line\\"><span>    Enable: &nbsp; &nbsp; &nbsp;true,</span></span>\\n<span class=\\"line\\"><span>    Healthy: &nbsp; &nbsp; true,</span></span>\\n<span class=\\"line\\"><span>    Ephemeral: &nbsp; true,</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  success, err := nc.nameClient.RegisterInstance(param)</span></span>\\n<span class=\\"line\\"><span>  if !success || err != nil {</span></span>\\n<span class=\\"line\\"><span>    return err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  return nil</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func (nc *Client) DeregisterInstance(serviceName, ip string, port uint64) error {</span></span>\\n<span class=\\"line\\"><span>  param := vo.DeregisterInstanceParam{</span></span>\\n<span class=\\"line\\"><span>    Ip: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ip,</span></span>\\n<span class=\\"line\\"><span>    Port: &nbsp; &nbsp; &nbsp; &nbsp;port,</span></span>\\n<span class=\\"line\\"><span>    ServiceName: serviceName,</span></span>\\n<span class=\\"line\\"><span>    GroupName: &nbsp; nc.NameGroupName,</span></span>\\n<span class=\\"line\\"><span>    Ephemeral: &nbsp; true,</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  success, err := nc.nameClient.DeregisterInstance(param)</span></span>\\n<span class=\\"line\\"><span>    if success || err != nil {</span></span>\\n<span class=\\"line\\"><span>    return err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  return nil</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func (nc *Client) GetAllInstances() (serviceList model.ServiceList, err error) {</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  param := vo.GetAllServiceInfoParam{</span></span>\\n<span class=\\"line\\"><span>    NameSpace: nc.Namespace,</span></span>\\n<span class=\\"line\\"><span>    GroupName: nc.NameGroupName,</span></span>\\n<span class=\\"line\\"><span>    PageNo: &nbsp; &nbsp;10,</span></span>\\n<span class=\\"line\\"><span>    PageSize: &nbsp;10,</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  serviceList = model.ServiceList{}</span></span>\\n<span class=\\"line\\"><span>  serviceList, err = nc.nameClient.GetAllServicesInfo(param)</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    return serviceList, err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  return serviceList, nil</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>func (nc *Client) WatchService(serviceName string, callback func(services []model.Instance)) error {</span></span>\\n<span class=\\"line\\"><span>  err := nc.nameClient.Subscribe(&amp;vo.SubscribeParam{</span></span>\\n<span class=\\"line\\"><span>    ServiceName: serviceName,</span></span>\\n<span class=\\"line\\"><span>    GroupName: &nbsp; nc.NameGroupName,</span></span>\\n<span class=\\"line\\"><span>    SubscribeCallback: func(services []model.Instance, err error) {</span></span>\\n<span class=\\"line\\"><span>      callback(services)</span></span>\\n<span class=\\"line\\"><span>    },</span></span>\\n<span class=\\"line\\"><span>  })</span></span>\\n<span class=\\"line\\"><span>  if err != nil {</span></span>\\n<span class=\\"line\\"><span>    return err</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>  return nil</span></span>\\n<span class=\\"line\\"><span>}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,m as data};
