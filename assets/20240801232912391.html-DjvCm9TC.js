import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,b as o}from"./app-CuZ5CmZm.js";const r="/blog/assets/images/20240801232912391.png",i={},l=o('<h1 id="webrtc-一-概念" tabindex="-1"><a class="header-anchor" href="#webrtc-一-概念"><span>WebRTC（一）：概念</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><p><strong>WebRTC 是一种实现网页或应用程序之间实时音视频通信的先进技术</strong>。</p><p><strong>WebRTC，全称 Web Real-Time Communication，是一项开源技术，它允许不同平台和浏览器之间在无需中间媒介的情况下建立直接的点对点连接。这项技术被广泛应用于视频会议、文件传输、聊天以及桌面共享等场景，其便捷性和高效性使其成为现代通信解决方案的重要组成部分。</strong></p><p><strong>WebRTC 的技术基础包括多个关键组件。首先是媒体捕获与流处理，这一模块负责从用户的设备（如摄像头和麦克风）捕获音频和视频数据，并将这些数据进行编码、解码、处理回声消除及降噪等操作。其次是信号传输方面，涉及数据压缩、封装以及处理网络延迟、丢包等问题，通过实现 STUN、TURN 等协议来解决 NAT 穿越问题，确保在不同网络环境下顺畅通信。</strong></p><p><strong>信令机制在 WebRTC 中也扮演着至关重要的角色。信令用于在通信双方之间建立和协调连接，例如交换媒体配置信息和协调网络地址及端口等信息。开发者可以根据具体应用需求选择或实现合适的信令协议，如 WebSocket、XMPP 或 SIP。此外，WebRTC 还提供了数据通道功能，用于直接在两个点之间传输任意数据，进一步扩大了其应用场景。</strong></p><p><strong>综上所述，WebRTC 不仅在技术上具有先进性，而且在用户体验上也进行了优化，其高度集成化和跨平台的特性使其成为实现实时音视频通信的理想选择。通过深入理解其基础架构及关键技术组件，开发者可以更加灵活地利用 WebRTC，为用户提供高效、安全、流畅的通信体验。</strong></p><h2 id="二、知识收集整理" tabindex="-1"><a class="header-anchor" href="#二、知识收集整理"><span>二、知识收集整理</span></a></h2><ul><li><strong>简介</strong><ul><li><strong>实时通讯技术，建立浏览器点对点通信</strong></li><li><strong>IM 即时通信，文字聊天、语音、文件传输。考虑的是可靠性</strong></li><li><strong>RTC 实时通信：音频童话、电话会议。考虑的是低延迟</strong></li><li><strong>除了 IE 浏览器 都支持 webRTC</strong></li><li><strong>内置强大的音视频引擎，如：媒体流编解码、回声消除、降噪、防抖</strong></li></ul></li><li><strong>组成</strong><ul><li><strong>浏览器 API</strong><ul><li><strong>getUserMedia：获取麦克风许可</strong></li><li><strong>RTCPeerConnection 提供创建、保持、监控、关闭链接的实现</strong></li><li><strong>RTCDataChannel：支持点对点传输，可以传输文件。文本消息等</strong></li></ul></li><li><strong>音视频引擎</strong><ul><li><strong>音频：G711/OPUS 编解码、回音消除、降噪</strong></li><li><strong>视频：H264/Vp8 编解码、图像增强、Jitter Buffer</strong></li></ul></li><li><strong>网络 I/O</strong><ul><li><strong>RTP/SRTP：传输视频流失 先加一个 RTP 头在交给 UDP，SRTP 是加密协议，更安全</strong></li><li><strong>RTCP：通过 RTCP 可以知道各端的网络质量，这样就可以做流控处理</strong></li><li><strong>P2P（ICE+STUN+TURN）：核心技术，利用 ICE、STUN、TURN 等技术 实现浏览器点对点链接，解决 NAC 穿透问题，实现高质量网络传输。</strong></li><li><strong>信令服务：实现可控的开启关闭视频传输指令</strong></li><li><strong>STUN 协议:遵守这个协议就可以拿到自己的公网 ip。免费：stun.l.google.com：19302</strong></li><li><strong>TURN 协议：与 STUN 的共同点是都通过修改应用层中的私网地址打到 NAT 穿透的效果，异同点是 TURN 是通过两方通讯的中间人方式实现穿透</strong></li></ul></li></ul></li><li><strong>通信过程</strong><ul><li><strong>条件</strong><ul><li><strong>两个 WebRTC 终端</strong></li><li><strong>Signal 信令服务器</strong></li><li><strong>stun/turn 服务器 负责 WebRTC 终端在公网的 IP 地址。以及 NAT 穿越失败后的数据中转</strong></li><li><strong>WebRTC 相关 api 需要 https 或者 localhost</strong></li></ul></li><li><strong>过程</strong><ul><li><strong>A 端设备检测，开启采集</strong></li><li><strong>准备就绪，发送指令到 signal 服务器</strong></li><li><strong>signal 创建服务器</strong></li><li><strong>B 端同样操作，加入房间，通知另一端</strong></li><li><strong>双端创建媒体链接对象 RTCPeerConnection。进行媒体协商</strong></li><li><strong>双端进行连通性测试，建立连接</strong></li><li><strong>将采集视频数据通过 RTCPeerConnection 对象进行编码，最终通过 P2P 传送给对端解码展示</strong></li></ul></li></ul></li><li><strong>实操</strong><ul><li><strong>采集</strong><ul><li><strong>const constraints = { video: true, audio: true }\\nconst localStream = navigator.mediaDevices.getUserMedia(constraints)</strong></li></ul></li><li><strong>设备信息</strong><ul><li><strong>console.log(navigator.mediaDevices.enumerateDevices())</strong></li></ul></li><li><strong>信令服务器</strong><ul><li><strong>ws</strong></li></ul></li><li><strong>媒体协商</strong><ul><li><strong>RTCPeerConnection ：找到双方共同支持的媒体能力</strong></li></ul></li><li><strong>收集 Candidate</strong><ul><li><strong>获取 ip、端口、候选者类型、优先级、传输协议、服务昵称等信息</strong></li><li><strong>候选者：host&gt;srflx&gt;relay（TURN 联通率最高，优先级最低）</strong></li></ul></li></ul></li></ul><figure><img src="'+r+'" alt="webRTC" tabindex="0" loading="lazy"><figcaption>webRTC</figcaption></figure>',10),s=[l];function g(a,c){return n(),e("div",null,s)}const u=t(i,[["render",g],["__file","20240801232912391.html.vue"]]),T=JSON.parse('{"path":"/golang/20240801232912391.html","title":"WebRTC（一）：概念","lang":"zh-CN","frontmatter":{"title":"WebRTC（一）：概念","category":["golang"],"date":"2024-08-01T00:00:00.000Z","tag":["golang","webrtc","turn"],"description":"WebRTC（一）：概念 一、介绍 WebRTC 是一种实现网页或应用程序之间实时音视频通信的先进技术。 WebRTC，全称 Web Real-Time Communication，是一项开源技术，它允许不同平台和浏览器之间在无需中间媒介的情况下建立直接的点对点连接。这项技术被广泛应用于视频会议、文件传输、聊天以及桌面共享等场景，其便捷性和高效性使其成...","head":[["meta",{"property":"og:url","content":"https://github.com/youngerhe/blog/golang/20240801232912391.html"}],["meta",{"property":"og:site_name","content":"木锤"}],["meta",{"property":"og:title","content":"WebRTC（一）：概念"}],["meta",{"property":"og:description","content":"WebRTC（一）：概念 一、介绍 WebRTC 是一种实现网页或应用程序之间实时音视频通信的先进技术。 WebRTC，全称 Web Real-Time Communication，是一项开源技术，它允许不同平台和浏览器之间在无需中间媒介的情况下建立直接的点对点连接。这项技术被广泛应用于视频会议、文件传输、聊天以及桌面共享等场景，其便捷性和高效性使其成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/youngerhe/blog/assets/images/20240801232912391.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-24T03:43:57.000Z"}],["meta",{"property":"article:author","content":"Mr.He"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"webrtc"}],["meta",{"property":"article:tag","content":"turn"}],["meta",{"property":"article:published_time","content":"2024-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-24T03:43:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebRTC（一）：概念\\",\\"image\\":[\\"https://github.com/youngerhe/blog/assets/images/20240801232912391.png\\"],\\"datePublished\\":\\"2024-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-24T03:43:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.He\\",\\"url\\":\\"/about/intro.html\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[]},{"level":2,"title":"二、知识收集整理","slug":"二、知识收集整理","link":"#二、知识收集整理","children":[]}],"git":{"createdTime":1724471037000,"updatedTime":1724471037000,"contributors":[{"name":"perkins","email":"mbitchina@163.com","commits":1}]},"readingTime":{"minutes":3.85,"words":1154},"filePathRelative":"golang/20240801232912391.md","localizedDate":"2024年8月1日","excerpt":"\\n<h2>一、介绍</h2>\\n<p><strong>WebRTC 是一种实现网页或应用程序之间实时音视频通信的先进技术</strong>。</p>\\n<p><strong>WebRTC，全称 Web Real-Time Communication，是一项开源技术，它允许不同平台和浏览器之间在无需中间媒介的情况下建立直接的点对点连接。这项技术被广泛应用于视频会议、文件传输、聊天以及桌面共享等场景，其便捷性和高效性使其成为现代通信解决方案的重要组成部分。</strong></p>\\n<p><strong>WebRTC 的技术基础包括多个关键组件。首先是媒体捕获与流处理，这一模块负责从用户的设备（如摄像头和麦克风）捕获音频和视频数据，并将这些数据进行编码、解码、处理回声消除及降噪等操作。其次是信号传输方面，涉及数据压缩、封装以及处理网络延迟、丢包等问题，通过实现 STUN、TURN 等协议来解决 NAT 穿越问题，确保在不同网络环境下顺畅通信。</strong></p>","autoDesc":true}');export{u as comp,T as data};
